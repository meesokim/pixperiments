#!/usr/bin/env python
import lilv
from hashlib import md5
import subprocess
import sys


def main():
    """ LV2 plugin binaries are designed to be accessed via a symbol
    'lv2_descriptor'.
    This is a problem when linking statically as the descriptor symbols clash.
    This script renames the symbols to a name containing the md5 hash of the
    plugin uri, and also writes a C header (.h) file containing info about the
    available plugins, and a file containing a list of plugin libraries for
    linking."""

    world = lilv.World()
    world.load_all()
    plugins = world.get_all_plugins()
    initial_plugin_list = []
    for plugin in plugins:
        uri = plugin.get_uri()
        library = plugin.get_library_uri().get_path()
        initial_plugin_list.append({'uri': uri,
                                    'library': library,
                                    'symbol': "lv2_descriptor_%s" % md5(uri).hexdigest()})
    f = open("descriptors.h", "w")
    f.write("/* This file is automatically generated by staticizer.py*/\n\n")

    plugin_list = []
    for p in initial_plugin_list:
        try:
            subprocess.check_output(["arm-none-eabi-objcopy", "--redefine-sym", "lv2_descriptor=%s" % (p['symbol'],), p['library']], stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError  as e:
            print ("Failed to process %s (%d): %s" % (p['uri'], e.returncode, e.output))
            continue
        plugin_list.append(p)

    for p in plugin_list:
        f.write("extern const LV2_Descriptor *%s(uint32_t index);\n" % p['symbol'])

    f.write("\nconst void* lv2_descriptor_loaders[] = {\n")
    for p in plugin_list:
        f.write("    %s,\n" % p['symbol'])

    f.write("    NULL\n};\n\n")
    f.close()
    f = open("plugin_library_list.txt", "w")
    f.write(" ".join([p['library'] for p in plugin_list]))
    f.close()


if __name__ == "__main__":
    main()
